import java.util.ArrayList;

/**
 * Represents an AI player in the game, an AI player is a virtual player that simulates a real player
 * in the game of scrabble. An AI player can place tiles to form a word on the board, pass and swap.
 * The AI's object just like the players objective is to win the game by gathering the most points.
 *
 * Author(s):
 * Version:
 * Date:
 */

public class AIPlayer extends Player {
    private ArrayList<String> firstWordCombinations ; //an array list that stores all the words that can be generated by the AIPlayers tiles in descending order for the first word

    /**
     * This is the constructor of the AIPlayer class which extends from the player class.
     * It calls the super method to initiate a player where each AIPlayer will have a special tag
     * to differentiate them form the other AI.
     * @param AITag the name of the AIPlayer ie, AI1, AI2, etc.
     */
    public AIPlayer(String AITag) {
        super(AITag);
        firstWordCombinations = new ArrayList<>();
    }

    /**
     * This method is the move an AIPlayer makes to place the first set of tiles on the board. It must ensure
     * that the first word traverses through the middle of the board. It will try and place the longest possible word to
     * at least a two-letter word that is valid from the word list.
     *
     * @param wordList the wordlist of valid words
     *
     */
    public ArrayList<Tiles> placeFirstWord(WordList wordList) {
        ArrayList<Tiles> tilesToPlace = new ArrayList<>(); //represents the array list of the tiles that the AIPlayer will place

        StringBuilder stringOfTiles = new StringBuilder(); //creates a string builder that will take the tiles of the player and make it into a string
        for(Tiles t: getTiles()){ //traverses through the tiles of the AIPlayer
            stringOfTiles.append(t.getLetter()); //adds the letter of each tile to the string builder
        }

        ArrayList<String> allPossibleWordsTiles = generateAllWordCombinations(stringOfTiles.toString()); //generates a list of all possible words that can be generated from the tiles of AIPlayer

        for(String word: allPossibleWordsTiles){ //traverses through each word in the array list of generated descending words
            if(word.length() >= 2 && wordList.isValidWord(word)){ //if the current word is at least a two-letter word and in the word list of valid words.
               for(char c: word.toCharArray()){ //traverses through each character in the array
                   for(Tiles t: getTiles()){ //traverses through the tiles of the AIPlayer
                        if(t.getLetter().equals(c)){ //if the tile's letter is the same as the character of the word
                            tilesToPlace.add(t); //adds the tile to teh array list of tiles
                            break; //moves on to the next character
                        }
                   }
               }
            }
        }
        return tilesToPlace; //returns the array list of tiles
    }

    /**
     * Generates all possible word combinations from the AIPlayers tiles from greatest to lowest.
     *
     * @param tiles The string of letters representing the AIPlayer's tiles.
     * @return A list of possible word combinations for all lengths.
     */
    private ArrayList<String> generateAllWordCombinations(String tiles) {
        firstWordCombinations.clear(); // Clear the list to avoid stale data.

        for (int length = tiles.length(); length >= 2; length--) { //It must be at least a two-letter word as that is the minimum in the array list of words for the game
            generateCombinations(tiles, "", length, firstWordCombinations); //calls a function to generate all possible words for a minimum two-letter word in descending order
        }
        return firstWordCombinations; //returns the list of possible words for all lengths in descending order
    }

    /**
     * A recursive algorithm that generates all possible words for a given length.
     *
     * @param tiles the possible letters to generate a word from.
     * @param current an initial empty string for all the combinations.
     * @param length the length that all words are being generated at.
     * @param firstWordCombinations The list to store the words of all lengths.
     */
    private void generateCombinations(String tiles, String current, int length, ArrayList<String> firstWordCombinations) {
        if (current.length() == length) { //when we have reached the desired length, the base case
            firstWordCombinations.add(current); //add it to the word list
            return;
        }

        for (int i = 0; i < tiles.length(); i++) { //traverses through the remaining tiles to find a word

            String theRemainingTiles = tiles.substring(0, i) + tiles.substring(i + 1); // creates a new string that excludes the current letter tiles to generate words with the other letters
            String theNewCombination = current + tiles.charAt(i); //adds the current letter to the word we are building

            generateCombinations(theRemainingTiles, theNewCombination, length, firstWordCombinations); //cals the function recursively with the remaining tiles, the updated words and the desired length
        }
    }

}
